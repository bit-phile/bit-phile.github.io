<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ports on bitPhile</title><link>https://nitinsharmacs.github.io/tags/ports/</link><description>Recent content in Ports on bitPhile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Mar 2023 12:36:44 +0530</lastBuildDate><atom:link href="https://nitinsharmacs.github.io/tags/ports/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Networking - How does it work?</title><link>https://nitinsharmacs.github.io/tech/docker/docker-networking/</link><pubDate>Sat, 18 Mar 2023 12:36:44 +0530</pubDate><guid>https://nitinsharmacs.github.io/tech/docker/docker-networking/</guid><description>&lt;p>Hello folks! Good to see you again on our journey of Docker. In this post, we would be learning about docker networking. So, let&amp;rsquo;s get started.&lt;/p>
&lt;h2 id="what-is-covered">What is covered?&lt;/h2>
&lt;ol>
&lt;li>Abstract&lt;/li>
&lt;li>Problem Statement&lt;/li>
&lt;li>How does Docker Network solve the problem?&lt;/li>
&lt;li>Simple example&lt;/li>
&lt;li>Types of networks based on drivers&lt;/li>
&lt;li>Diving deep into &lt;code>bridge&lt;/code> networks&lt;/li>
&lt;li>Conclusion&lt;/li>
&lt;/ol>
&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>Docker has been a powerful tool for creating and managing independent applications and services. These services are interacting with each other through specified interfaces. However, the isolated environment of docker stymies that interaction. An isolated environment hinders services request-response communications as they have different network namespaces.&lt;/p></description></item></channel></rss>